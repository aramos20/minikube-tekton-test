apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-task
spec:
  params:
    - name: url
      type: string
      description: "URL del repositorio Git"
      default: "https://github.com/aramos20/test.git"
    - name: revision
      type: string
      description: "Branch o commit a clonar"
      default: "main"
  workspaces:
    - name: output
      mountPath: /workspace
  steps:
    - name: clone
      image: alpine/git:latest
      workingDir: /workspace
      script: |
        #!/bin/sh
        set -ex
        rm -rf /workspace/* /workspace/.[!.]* /workspace/..?*
        git clone $(params.url) . 
        git checkout $(params.revision)
        if [ ! -f /workspace/app/Dockerfile ]; then
          echo "Error: Dockerfile no encontrado en la carpeta app"
          exit 1
        fi

        echo "Dockerfile encontrado en /workspace/app/Dockerfile"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-and-push-task
spec:
  params:
    - name: IMAGE
      description: "Nombre completo de la imagen"
      type: string
      default: "docker.io/aramos20/myapi:latest"
    - name: CONTEXT_DIR
      description: "Directorio del Dockerfile (relativo al workspace)"
      type: string
      default: "app"
  workspaces:
    - name: source
      mountPath: /workspace
  steps:
    - name: kaniko-build-and-push
      image: gcr.io/kaniko-project/executor:debug
      workingDir: /workspace
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.CONTEXT_DIR)/Dockerfile
        - --context=/workspace
        - --destination=$(params.IMAGE)
        - --verbosity=debug
        - --insecure
        - --skip-tls-verify
      volumeMounts:
        - name: kaniko-secret
          mountPath: /kaniko/.docker
  volumes:
    - name: kaniko-secret
      secret:
        secretName: regcred
        items:
          - key: .dockerconfigjson
            path: config.json
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: MANIFEST_DIR
      description: "Directorio con los manifiestos de Kubernetes (relativo al workspace)"
      type: string
      default: "k8s"
  workspaces:
    - name: source
      mountPath: /workspace
  steps:
    - name: copy-manifests
      image: alpine/git:latest
      workingDir: /workspace
      script: |
        #!/bin/sh
        set -ex
        cp -r $(params.MANIFEST_DIR)/* .
    - name: deploy
      image: bitnami/kubectl:latest
      workingDir: /workspace
      script: |
        #!/bin/sh
        set -ex
        kubectl apply -f backend.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f frontend.yaml
        kubectl apply -f postgres.yaml
        kubectl apply -f secrets.yaml
