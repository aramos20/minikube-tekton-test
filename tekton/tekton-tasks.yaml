apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-task
spec:
  params:
    - name: url
      type: string
      description: "URL del repositorio Git"
      default: "https://github.com/aramos20/test.git"
    - name: revision
      type: string
      description: "Branch o commit a clonar"
      default: "main"
  workspaces:
    - name: output
      mountPath: /workspace
  steps:
    - name: clone
      image: alpine/git:latest
      workingDir: /workspace
      script: |
        #!/bin/sh
        set -ex
        rm -rf /workspace/* /workspace/.[!.]* /workspace/..?*
        git clone $(params.url) . 
        git checkout $(params.revision)
        if [ ! -f /workspace/app/Dockerfile ]; then
          echo "Error: Dockerfile no encontrado en la carpeta app"
          exit 1
        fi

        echo "Dockerfile encontrado en /workspace/app/Dockerfile"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-and-push-task
spec:
  params:
    - name: IMAGE
      description: "Nombre completo de la imagen"
      type: string
      default: "docker.io/aramos20/myapi:latest"
    - name: CONTEXT_DIR
      description: "Directorio del Dockerfile (relativo al workspace)"
      type: string
      default: "app"
  workspaces:
    - name: source
      mountPath: /workspace
    - name: artifacts
      mountPath: /workspace/artifacts
  steps:
    - name: kaniko-build
      image: gcr.io/kaniko-project/executor:debug
      workingDir: /workspace
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.CONTEXT_DIR)/Dockerfile
        - --context=/workspace/source
        - --no-push
        - --destination=$(params.IMAGE)
        - --tar-path=/workspace/artifacts/image.tar
        - --verbosity=debug
    - name: crane-push
      image: gcr.io/go-containerregistry/crane:debug
      command: ["/bin/sh", "-c"]
      args:
        - |
          crane auth login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" docker.io
          crane push /workspace/artifacts/image.tar $(params.IMAGE)
      env:
        - name: DOCKER_USERNAME
          valueFrom:
            secretKeyRef:
              name: dockerhub-credentials
              key: username
        - name: DOCKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dockerhub-credentials
              key: password

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: MANIFEST_DIR
      description: "Directorio con los manifiestos de Kubernetes (relativo al workspace)"
      type: string
      default: "k8s"
  workspaces:
    - name: source
      mountPath: /workspace
  steps:
    - name: deploy
      image: bitnami/kubectl:latest
      workingDir: /workspace/source
      script: |
        #!/bin/sh
        set -ex
        kubectl apply -f $(params.MANIFEST_DIR)/backend.yaml
        kubectl apply -f $(params.MANIFEST_DIR)/configmap.yaml
        kubectl apply -f $(params.MANIFEST_DIR)/frontend.yaml
        kubectl apply -f $(params.MANIFEST_DIR)/postgres.yaml
        kubectl apply -f $(params.MANIFEST_DIR)/secrets.yaml
